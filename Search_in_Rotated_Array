"""There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.
length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed).
For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2]."""

class Solution:
    def searchElement(self, A, target, begin, end):
        if begin > end:
            return -1
        mid = (begin + end) // 2
        if A[begin] < A[end]:
            rotated = False
        else:
            rotated = True
        if A[mid] == target:
            return mid
        elif A[mid] < target:
            if rotated:
                temp = self.searchElement(A, target, begin, mid - 1)
                if temp != -1:
                    return temp
            return self.searchElement(A, target, mid + 1, end)
        else:
            if rotated:
                temp = self.searchElement(A, target, mid + 1, end)
                if temp != -1:
                    return temp
            return self.searchElement(A, target, begin, mid - 1)
        
    def search(self, A, target):
        return self.searchElement(A, target, 0, len(A)-1)


class Solution:
    def search(self, nums, target):
        nums1 = sorted(nums)
        low = 0
        high = len(nums)-1
        for i in range(len(nums1)):
            mid = (low + high) // 2
            if nums1[mid] == target:
                return nums.index(nums1[mid]) #note
            elif nums1[mid] < target:
                low = mid+1
            else:
                high = mid-1
        return -1
