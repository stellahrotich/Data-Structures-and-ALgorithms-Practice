"""Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
A subarray is a contiguous part of an array."""

#Bruteforce
#Time Complexity : O(N2), where N is the number of elements in nums.
#Space Complexity : O(1)
class Solution:
    def maxSubArray(self, nums):
        ans = -inf
        for i in range(len(nums)):
            cur_sum = 0
            for j in range(i, len(nums)):
                cur_sum += nums[j]
                ans = max(ans, cur_sum)
        return ans

#Optimal Solution
class Solution:
    def maxSubArray(self, A):
        max_so_far = max_ending_here = A[0]
        for item in A[1:]:
            max_ending_here = max(item, max_ending_here + item)
            max_so_far = max(max_ending_here, max_so_far)
        return max_so_far

#WIKIPEDIA
def max_subarray(numbers):
    """Find the largest sum of any contiguous subarray."""
    best_sum = 0  # or: float('-inf')
    current_sum = 0
    for x in numbers:
        current_sum = max(0, current_sum + x)
        best_sum = max(best_sum, current_sum)
    return best_sum
